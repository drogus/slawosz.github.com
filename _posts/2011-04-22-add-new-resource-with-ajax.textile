--- 
title: "Add new resource with ajax"
layout: post
categories: ['en']
---
In Railscast 258 Ryan Bates shows how to use Token Fields, javascript
plugin which helps adding entries for many and many to many
association. In this article I will show you how to create not
existing entries with ajax.

You can download application for this tutorial from github or use it
on heroku to see how it works. I started with application created by
Ryan in 258 episode.

To add authors we can go to /author/new page, but when we already on
/books/new we rather want to render form with ajax. To render form we
will use facebox, writen in jquery by Chris Wanstrath. So, simply
download it from github and place facebox.css in public/stylesheets, 
facebox.js in public/javascripts and loading.gif and closelabel.png in
public/images

Now, point write paths for images in facebox.js:

loadingImage : '/images/loading.gif',
closeImage   : '/images/closelabel.png',

and place stylesheet and javascript in our application:

{% highlight rhtml %}
<%= stylesheet_link_tag "application", "token-input-facebook","facebox" %>
<%= javascript_include_tag :defaults, "jquery.tokeninput","facebox" %>
{% endhighlight %}

You can see it all in commit a67c4715b7ceadb3fa4b1cb7a177e090ce302bf4

Now it is time to show form for new author on facebox.

Lets add link in app/view/_form.html.erb partial: 

<%= f.label :author_tokens, "Authors" %><%= link_to 'Add new author', new_author_path, :remote => true %><br />

It looks like a normal link, but with one exception: it has a remote
option, indicating, that we want perform an ajax request to tjis link.
This is new way in Rails 3 to generate ajax request and I think it is
great. It simply adds a html data-remote attribute to our link and
such link is bind in rails.js to provide ajax request to url, in our
case to new_author_path. So now, we have to use this request in link
destinatin, it is in new method in AuthorsController.

With Rails it is so simple :) We had to add only a new template in js,
app/views/authors/new.js.erb. When we click link, method new will
recognize that request is in js format and render js template. So now,
in template we will write code, which will render new action on
facebox:

$.facebox('<%= escape_javascript(render :template => 'books/new') %>');

This generate a form on facebox with app/views/books/new.html.erb
template. You can check this in commit cc797260373387081b0ae01df8d724830003785b.

If you would like to know more about using facebox, see
public/javascripts/facebox.js. Every use case is described in this
file.

Now, we want to send our form and create a new author.

Normaly, we can use 

:remote => true

in our form, but we only use remote form in facebox. So, let's add
data-remote attribute to ajax form in facebox. To do it, we will add
to app/views/books/new.js.erb:

$('#facebox form').data('remote','true');

This will add attribute data-remote='true' to our form, and with this
attribute, rails.js will process our form with ajax.  
After submiting, the request goes to method create in
AuthorsController and is looking for js template. In this template, we
need only close facebok. So, we create file
app/views/authors/create.js.erb and write:

$(document).trigger('close.facebox');

Thus we would like to perform other actions in html and js request in
this method, we use respond_to block and redirect on html format and render
template on js format:

  def create
    @author = Author.new(params[:author])
    if @author.save
      respond_to do |format|
        format.html { redirect_to @author, :notice => "Successfully created author." }
        format.js
      end
    else
      render :action => 'new'
    end
  end

Check commit 2e66917225455463e1d86be01136f6b629c82e73 for this changes.




